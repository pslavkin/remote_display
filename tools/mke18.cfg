interface ftdi 
transport select swd
ftdi_device_desc "USB <-> JTAG/SWD"
ftdi_vid_pid 0x0451 0xc32a
ftdi_layout_init 0x00a8 0x00eb
ftdi_layout_signal SWD_EN   -ndata 0x0080
ftdi_layout_signal nSRST    -noe   0x0020
ftdi_layout_signal SWDIO_OE -data  0x0008

gdb_port 10000
telnet_port 20000
tcl_port 30000



# Freescale Kinetis KE series devices
#


# ARM Debug Interface V5 (ADI_V5) utility
# ... Mostly for SWJ-DP (not SW-DP or JTAG-DP, since
# SW-DP and JTAG-DP targets don't need to switch based
# on which transport is active.
#
# declare a JTAG or SWD Debug Access Point (DAP)
# based on the transport in use with this session.
# You can't access JTAG ops when SWD is active, etc.

# params are currently what "jtag newtap" uses
# because OpenOCD internals are still strongly biased
# to JTAG ....  but for SWD, "irlen" etc are ignored,
# and the internals work differently

# for now, ignore non-JTAG and non-SWD transports
# (e.g. initial flash programming via SPI or UART)

# split out "chip" and "tag" so we can someday handle
# them more uniformly irlen too...)

#if [catch {transport select}] {
#  echo "Error: unable to select a session transport. Can't continue."
#  shutdown
#}
#
proc swj_newdap {chip tag args} {
 if [using_hla] {
     eval hla newtap $chip $tag $args
 } elseif [using_jtag] {
     eval jtag newtap $chip $tag $args
 } elseif [using_swd] {
    eval swd newdap $chip $tag $args
 }
}



if { [info exists CHIPNAME] } {
    set _CHIPNAME $CHIPNAME
} else {
    set _CHIPNAME kl
}

# Work-area is a space in RAM used for flash programming
# By default use 1kB
if { [info exists WORKAREASIZE] } {
   set _WORKAREASIZE $WORKAREASIZE
} else {
   set _WORKAREASIZE 0x400
}

if { [info exists CPUTAPID] } {
    set _CPUTAPID $CPUTAPID
} else {
   if { [using_jtag] } {
      set _CPUTAPID 0x4ba00477
   } {
      set _CPUTAPID 0x2ba01477
     }
}


swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME cortex_m -chain-position $_CHIPNAME.cpu

$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0

set _FLASHNAME $_CHIPNAME.flash
flash bank $_FLASHNAME kinetis 0 0 0 0 $_TARGETNAME

adapter_khz 1000
reset_config srst_nogate


#
if {![using_hla]} {

   # It is important that "kinetis_ke mdm check_security" is called for
   # 'examine-end' event and not 'eximine-start'. Calling it in 'examine-start'
   # causes "kinetis_ke mdm check_security" to fail the first time openocd
   # calls it when it tries to connect after the CPU has been power-cycled.
   $_CHIPNAME.cpu configure -event examine-end {
      kinetis_ke mdm check_security
   }

   # if srst is not fitted use SYSRESETREQ to
   # perform a soft reset
   cortex_m reset_config sysresetreq
}

$_TARGETNAME configure -event gdb-attach {
   halt
 }
 $_TARGETNAME configure -event gdb-attach {
   reset init
}
gdb_memory_map disable
gdb_flash_program enable

#init
